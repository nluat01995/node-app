stages:
  - test
  - build
  - deploy
cache:
    paths:
      - node_modules
# test_dev:
#   stage: test
#   image: node
#   script:
#     - npm install
#   artifacts:
#     paths:
#       - node_modules
#   only:
#     - main
# sonarqube-check:
#   image: 
#     name: sonarsource/sonar-scanner-cli:latest
#     entrypoint: [""]
#   stage: test
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#     GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script: 
#     - sonar-scanner
#   allow_failure: true
#   only:
#     - main # or the name of your main branch

build_dev:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_DOCKER_REGISTRY -p $CI_DOCKER_PASSWORD
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAGS .
    - docker push $IMAGE_NAME:$IMAGE_TAGS
  only:
    - main
deploy_dev:
  stage: deploy
  image: alpine
  before_script:
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - chmod 700 ~/.ssh
  variables:
    IMAGE_NAME: $IMAGE_NAME
    IMAGE_TAGS: $IMAGE_TAGS
  script:
    - ssh -o StrictHostKeyChecking=no root@52.207.251.108 "docker login -u $CI_DOCKER_REGISTRY -p $CI_DOCKER_PASSWORD && docker stop $(docker ps -aq) && docker rm $(docker ps -aq) && docker pull luatcute/website_app && docker run -d -p 80:3000 luatcute/website_app"
    - echo "Application successfully deployed."
      
  only:
    - main

build_pro:
  stage: build
  image: 
    name: docker:latest
  services:
    - docker:19-dind
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    - aws --version
    - docker info
    - docker --version
  script:
    - docker build -t $DOCKER_REGISTRY/$APP_NAME:$CI_PIPELINE_IID .
    - docker push $DOCKER_REGISTRY/$APP_NAME:$CI_PIPELINE_IID
  only:
    - aws
